# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ pkgs, config, lib, modulesPath, outputs, ... }:
let
  nvidiaPackage =
    outputs.nixosConfigurations.gecko.options.hardware.nvidia.package.value;
  rtl_bt_fw_file = builtins.fetchurl {
    url =
      "https://github.com/Arroquw/rtl8761bu_fw/raw/refs/heads/main/rtl8761bu_fw.bin";
    sha256 = "sha256:1hdk46hly2ir4ccqcwlb48mvvpkwd3zc8vhhfhkbl770fszmn49d";
  };
  rtl8761_fw = pkgs.runCommandNoCC "rtl_bt-firmware" { } ''
    mkdir -p $out/lib/firmware/rtl_bt
    cp "${rtl_bt_fw_file}" "$out"/lib/firmware/rtl_bt/rtl8761bu_fw.bin
  '';
in {
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];
  nixpkgs.config.allowUnfree = true;
  boot = {
    initrd = {
      availableKernelModules =
        [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
      kernelModules =
        [ "v4l2loopback" "vfio_pci" "vfio" "vfio_iommu_type1" "kvmfr" ];
      # extraModprobeConfig = ''
      # options kvmfr static_size_mb=32
      # '';
    };
    kernelModules = [ "kvm-intel" "kvmfr" ];
    extraModprobeConfig = ''
      options kvmfr static_size_mb=32
    '';
    kernelParams = [
      "nvidia_drm.modeset=1"
      "iommu=pt"
      "video=efifb:off"
      "intel_iommu=on"
      ''vfio-pci.ids="10de:1bb1,10de:10f0"''
    ];
    extraModulePackages = with config.boot.kernelPackages; [
      nvidiaPackage
      v4l2loopback
      kvmfr
    ];
  };

  hardware = { firmware = [ rtl8761_fw ]; };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/70f6cc99-c50b-4e49-9be9-b97e0c5d2dc7";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/DE8A-5AF9";
    fsType = "vfat";
  };
  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";
  hardware.cpu.intel.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
}
