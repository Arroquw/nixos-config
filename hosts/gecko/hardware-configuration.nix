# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, outputs, ... }:
let
  nvidiaPackage =
    outputs.nixosConfigurations.gecko.options.hardware.nvidia.package.value;
in {
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];
  nixpkgs.config.allowUnfree = true;
  boot = {
    initrd = {
      availableKernelModules =
        [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
      kernelModules = [ "v4l2loopback" ];
    };
    kernelModules = [ "kvm-intel" ];
    kernelParams = [ "nvidia_drm.modeset=1" ];
    extraModulePackages = with config.boot.kernelPackages; [
      nvidiaPackage
      v4l2loopback
    ];
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/70f6cc99-c50b-4e49-9be9-b97e0c5d2dc7";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/DE8A-5AF9";
    fsType = "vfat";
  };
  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";
  hardware.cpu.intel.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
}
